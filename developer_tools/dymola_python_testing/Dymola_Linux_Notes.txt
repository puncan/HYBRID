Notes on using Dymola on Linux 
Bob Kinoshita

1) Installation in a user account 

If it is not desired to install Dymola in a protected location (the default for Dymola is /opt), 
it can be used from a user account folder.  Dymola is distributed in a tar file that contains an
RPM archive, along with other archives with various libraries and the license server.  For Dymola 
2017, this file is dymola-2017.1-1.x86_64.rpm (for 64-bit).  This archive can be unpacked into a
local directory as follows:

rpm2cpio dymola-2017.1-1.x86_64.rpm | cpio -idmv

The ./opt/dymola-2017-x86_64 can then be moved to the desired location.  To run dymola, take 
the script file ./usr/local/bin/dymola-2017-x86_64 can be copied and adapted to run dymola from
the location it was copied to: 

<Begin script file>
#!/bin/sh
export PATH

# Adjust DYMOLA to wherever dymola-2017-x86_64 was moved to 
export DYMOLA=/opt/dymola-2017-x86_64

export LD_LIBRARY_PATH=$DYMOLA/bin/lib:$DYMOLA/bin/lib64:$LD_LIBRARY_PATH

# If some stuff is needed to set up the host computer for Dymola it can be put here
#   In the case of the INL Falcon Cluster a module must be loaded so that GCC 4.9.3 is available 
#   to build models.
module load GCC/4.9.3

exec $DYMOLA/bin64/dymola $*
<End script file>


2) Dymola start-up script

On Linux, a user-specific Modelica script that is called on start is located in ~/.dynasim/setup.mos.
This file can be used to specify actions that Dymola should take every time it is started.  Items
of interest to automated testing are:

  - Loading the ThermoPower library so it is availble for Hybrid project models 

    <Begin script file>
    // ===== Add path to ThermoPower as default (So that auto-test stuff can find it)
    AddModelicaPath("/home/bobk/projects/ThermoPower 3.1", erase=false);
    openModel("/home/bobk/projects/ThermoPower 3.1/package.mo");
    <Begin end file>

  - Setting the compiler to 64-bit mode.  

    <Begin script file>
    // ===== Setup Dymola for 64-bit compilation of all models
    Advanced.CompileWith64=2
    <Begin end file>

NOTE: With Dymola 2017FD01 changes were made that affect system configuration:
       - The per-user configuration directory ~/.dynasim is deprecated in favor of ~/.dassaultsystemes/dymola/ 
         and many settings are moved to a new XML file setup.dymx.  Although Dymola 2017FD01 will still look 
         for the old files if they exist, it does not appear that setup.mos is being read.  The commands will 
         instead need to be added to the system-wide script file dymola-2017FD01-x86_64/insert/dymola.mos for 
         them to be executed at program start.
       - It also appears that Dymola 2017FD01 does not like packages to be in directories with names
         different than the package name.  Therefore, the Thermopower library needed for building Hybrid 
         repository models need to be in a subdirectory named "ThermoPower". 


3) Compiler adjustments

On Linux, Dymola uses a script file (dymola-2017-x86_64/insert/dsbuild.sh) to call the compiler.  To set
64-bit compilation mode use the Dymola command "Advanced.CompileWith64=2", which will set flags used when
dsbuild.sh is called. 


4) Display Needs

Dymola requires an X display to show its user interface (which is based on the Qt toolkit).  
For automated runs where a display is not available, a dummy framebuffer must be provided.
The following script can be used to provide this (command "Xvfb" is required to be on the 
system for this to work).
 
<Begin script file xvfb-run>
#!/bin/sh

# $Id: xvfb-run 2027 2004-11-16 14:54:16Z branden $

# This script starts an instance of Xvfb, the "fake" X server, runs a command
# with that server available, and kills the X server when done.  The return
# value of the command becomes the return value of this script, except in cases
# where this script encounters an error.
#
# If anyone is using this to build a Debian package, make sure the package
# Build-Depends on xvfb, xbase-clients, and xfonts-base.
#
# (Found at https://gist.github.com/tyleramos/3744901)

set -e

PROGNAME=xvfb-run
SERVERNUM=99
AUTHFILE=
ERRORFILE=/dev/null
STARTWAIT=3
XVFBARGS="-screen 0 640x480x8"
LISTENTCP="-nolisten tcp"
XAUTHPROTO=.

# Query the terminal to establish a default number of columns to use for
# displaying messages to the user.  This is used only as a fallback in the event
# the COLUMNS variable is not set.  ($COLUMNS can react to SIGWINCH while the
# script is running, and this cannot, only being calculated once.)
DEFCOLUMNS=$(stty size 2>/dev/null | awk '{print $2}') || true
if ! expr "$DEFCOLUMNS" : "[[:digit:]]\+$" >/dev/null 2>&1; then
    DEFCOLUMNS=80
fi

# Display a message, wrapping lines at the terminal width.
message () {
    echo "$PROGNAME: $*" | fmt -t -w ${COLUMNS:-$DEFCOLUMNS}
}

# Display an error message.
error () {
    message "error: $*" >&2
}

# Display a usage message.
usage () {
    if [ -n "$*" ]; then
        message "usage error: $*"
    fi
    cat <<EOF
Usage: $PROGNAME [OPTION ...] COMMAND
Run COMMAND (usually an X client) in a virtual X server environment.
Options:
-a        --auto-servernum          try to get a free server number, starting at
                                    --server-num
-e FILE   --error-file=FILE         file used to store xauth errors and Xvfb
                                    output (default: $ERRORFILE)
-f FILE   --auth-file=FILE          file used to store auth cookie
                                    (default: ./.Xauthority)
-h        --help                    display this usage message and exit
-n NUM    --server-num=NUM          server number to use (default: $SERVERNUM)
-l        --listen-tcp              enable TCP port listening in the X server
-p PROTO  --xauth-protocol=PROTO    X authority protocol name to use
                                    (default: xauth command's default)
-s ARGS   --server-args=ARGS        arguments (other than server number and
                                    "-nolisten tcp") to pass to the Xvfb server
                                    (default: "$XVFBARGS")
-w DELAY  --wait=DELAY              delay in seconds to wait for Xvfb to start
                                    before running COMMAND (default: $STARTWAIT)
EOF
}

# Find a free server number by looking at .X*-lock files in /tmp.
find_free_servernum() {
    # Sadly, the "local" keyword is not POSIX.  Leave the next line commented in
    # the hope Debian Policy eventually changes to allow it in /bin/sh scripts
    # anyway.
    #local i

    i=$SERVERNUM
    while [ -f /tmp/.X$i-lock ]; do
        i=$(($i + 1))
    done
    echo $i
}

# Clean up files
clean_up() {
    if [ -e "$AUTHFILE" ]; then
        XAUTHORITY=$AUTHFILE xauth remove ":$SERVERNUM" >>"$ERRORFILE" 2>&1
    fi
    if [ -n "$XVFB_RUN_TMPDIR" ]; then
        if ! rm -r "$XVFB_RUN_TMPDIR"; then
            error "problem while cleaning up temporary directory"
            exit 5
        fi
    fi
}

# Parse the command line.
ARGS=$(getopt --options +ae:f:hn:lp:s:w: \
       --long auto-servernum,error-file:,auth-file:,help,server-num:,listen-tcp,xauth-protocol:,server-args:,wait: \
       --name "$PROGNAME" -- "$@")
GETOPT_STATUS=$?

if [ $GETOPT_STATUS -ne 0 ]; then
    error "internal error; getopt exited with status $GETOPT_STATUS"
    exit 6
fi

eval set -- "$ARGS"

while :; do
    case "$1" in
        -a|--auto-servernum) SERVERNUM=$(find_free_servernum); AUTONUM="yes" ;;
        -e|--error-file) ERRORFILE="$2"; shift ;;
        -f|--auth-file) AUTHFILE="$2"; shift ;;
        -h|--help) SHOWHELP="yes" ;;
        -n|--server-num) SERVERNUM="$2"; shift ;;
        -l|--listen-tcp) LISTENTCP="" ;;
        -p|--xauth-protocol) XAUTHPROTO="$2"; shift ;;
        -s|--server-args) XVFBARGS="$2"; shift ;;
        -w|--wait) STARTWAIT="$2"; shift ;;
        --) shift; break ;;
        *) error "internal error; getopt permitted \"$1\" unexpectedly"
           exit 6
           ;;
    esac
    shift
done

if [ "$SHOWHELP" ]; then
    usage
    exit 0
fi

if [ -z "$*" ]; then
    usage "need a command to run" >&2
    exit 2
fi

if ! which xauth >/dev/null; then
    error "xauth command not found"
    exit 3
fi

# tidy up after ourselves
trap clean_up EXIT

# If the user did not specify an X authorization file to use, set up a temporary
# directory to house one.
if [ -z "$AUTHFILE" ]; then
    XVFB_RUN_TMPDIR="$(mktemp -d -t $PROGNAME.XXXXXX)"
    # Create empty file to avoid xauth warning
    #AUTHFILE=$(tempfile -n "$XVFB_RUN_TMPDIR/Xauthority")
    AUTHFILE=$(mktemp "$XVFB_RUN_TMPDIR/XauthorityXXX")
fi

# Start Xvfb.
MCOOKIE=$(mcookie)
tries=10
while [ $tries -gt 0 ]; do
    tries=$(( $tries - 1 ))
    XAUTHORITY=$AUTHFILE xauth source - << EOF >>"$ERRORFILE" 2>&1
add :$SERVERNUM $XAUTHPROTO $MCOOKIE
EOF
    XAUTHORITY=$AUTHFILE Xvfb ":$SERVERNUM" $XVFBARGS $LISTENTCP >>"$ERRORFILE" 2>&1 &
    XVFBPID=$!

    sleep "$STARTWAIT"
    if kill -0 $XVFBPID 2>/dev/null; then
        break
    elif [ -n "$AUTONUM" ]; then
        # The display is in use so try another one (if '-a' was specified).
        SERVERNUM=$((SERVERNUM + 1))
        SERVERNUM=$(find_free_servernum)
        continue
    fi
    error "Xvfb failed to start" >&2
    exit 1
done

# Start the command and save its exit status.
set +e
DISPLAY=:$SERVERNUM XAUTHORITY=$AUTHFILE "$@" 2>&1
RETVAL=$?
set -e

# Kill Xvfb now that the command has exited.
kill $XVFBPID

# Return the executed command's exit status.
exit $RETVAL

# vim:set ai et sts=4 sw=4 tw=80:
<End script file>

This can be run by using another script to detect if an X display is present:

<Begin script file>
#!/bin/bash
export PATH=~:$PATH
module load raven-devel-gcc
if [ -z "$DISPLAY" ]; then
echo "DISPLAY is not set"
xvfb-run python run_tests.py $1 $2 $3 $4 $5
else
echo "DISPLAY is set"
python run_tests.py $1 $2 $3 $4 $5
fi
<End script file>
