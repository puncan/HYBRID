within NHES.Utilities.FMI_Templates.Adaptors.MSLHeatAdaptors.Utilities.FMIs;
model MSLHeatAdaptors_Utilities_ConductionME_fmu
  "Input/output block of a conduction model"
extends fmuIcon;
// Model automatically generated by Dymola from FMI model description
public
  type Modelica_Blocks_Interfaces_RealInput = Real;
  type Modelica_Blocks_Interfaces_RealOutput = Real;
  parameter Modelica.Units.SI.ThermalConductance G=1 "Thermal conductance";
protected
  record temperatureToHeatFlow1_rec
    Modelica_Blocks_Interfaces_RealInput p(unit = "K", displayUnit = "degC") "Input for potential";
    Modelica_Blocks_Interfaces_RealOutput f(unit = "W") "Output for flow";
  protected
    record heatPort_rec
      Modelica.Units.SI.Temperature T "Port temperature";
      Modelica.Units.SI.HeatFlowRate Q_flow
        "Heat flow rate (positive if flowing from outside into the component)";
    end heatPort_rec;
  public
    heatPort_rec heatPort;
  end temperatureToHeatFlow1_rec;
public
  temperatureToHeatFlow1_rec temperatureToHeatFlow1;
protected
  record thermalConductor_rec
    Modelica.Units.SI.HeatFlowRate Q_flow
      "Heat flow rate from port_a -> port_b";
    Modelica.Units.SI.TemperatureDifference dT "port_a.T - port_b.T";
    Modelica.Units.SI.ThermalConductance G
      "Constant thermal conductance of material";
  protected
    record port_a_rec
      Modelica.Units.SI.Temperature T "Port temperature";
      Modelica.Units.SI.HeatFlowRate Q_flow
        "Heat flow rate (positive if flowing from outside into the component)";
    end port_a_rec;
  public
    port_a_rec port_a;
  protected
    record port_b_rec
      Modelica.Units.SI.Temperature T "Port temperature";
      Modelica.Units.SI.HeatFlowRate Q_flow
        "Heat flow rate (positive if flowing from outside into the component)";
    end port_b_rec;
  public
    port_b_rec port_b;
  end thermalConductor_rec;
public
  thermalConductor_rec thermalConductor;
protected
  record temperatureToHeatFlow2_rec
    Modelica_Blocks_Interfaces_RealInput p(unit = "K", displayUnit = "degC") "Input for potential";
    Modelica_Blocks_Interfaces_RealOutput f(unit = "W") "Output for flow";
  protected
    record heatPort_rec
      Modelica.Units.SI.Temperature T "Port temperature";
      Modelica.Units.SI.HeatFlowRate Q_flow
        "Heat flow rate (positive if flowing from outside into the component)";
    end heatPort_rec;
  public
    heatPort_rec heatPort annotation(Dialog);
  end temperatureToHeatFlow2_rec;
public
  temperatureToHeatFlow2_rec temperatureToHeatFlow2 annotation(Dialog);
  parameter Real _T1_start = 288.15
  annotation (Dialog( group="Start values for inputs "));
  Modelica.Blocks.Interfaces.RealInput T1(unit = "K", displayUnit = "degC", nominal = 300.0, min = 0.0, start = _T1_start) "Temperature of left heatPort of conduction element"
  annotation (Placement(transformation(extent={{-124,14},{-84,54}})));
  parameter Real _T2_start = 288.15
  annotation (Dialog( group="Start values for inputs "));
  Modelica.Blocks.Interfaces.RealInput T2(unit = "K", displayUnit = "degC", nominal = 300.0, min = 0.0, start = _T2_start) "Temperature of right heatPort of conduction element"
  annotation (Placement(transformation(extent={{-124,-53},{-84,-13}})));
  Modelica.Blocks.Interfaces.RealOutput Q_flow1(unit = "W") "Heat flow generated by the conduction element"
  annotation (Placement(transformation(extent={{100,14},{140,54}})));
  Modelica.Blocks.Interfaces.RealOutput Q_flow2(unit = "W") "Heat flow generated by the conduction element"
  annotation (Placement(transformation(extent={{100,-53},{140,-13}})));
public
  parameter String fmi_instanceName="MSLHeatAdaptors_Utilities_ConductionME_fmu"
  annotation (Dialog(tab="FMI", group="Instance name"));
  parameter Boolean fmi_loggingOn=false
  annotation (Dialog(tab="FMI", group="Enable logging"));
  parameter String fmi_resourceLocation="file:///"+ModelicaServices.ExternalReferences.loadResource("modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/resources")
  annotation (Dialog(tab="FMI", group="Instantiation"));
protected
  constant Integer fmi_NumberOfEventIndicators = 0;
  fmi_Functions.fmiModel fmi;
  parameter Real zeroOffset = 0; //will fix in later implementations
  Boolean fmi_NewStates;
  Boolean fmi_StepEvent;
  Boolean fmi_DiscreteInputChanged;
  Boolean fmi_iterationConverged(start=false, fixed=true);
  Integer fmi_NextMode;
  Boolean fmi_flip(start=false, fixed=true);
  Real fmi_TNext(start=1e37, fixed=true);
  Real myTime;
  parameter Real myTimeStart(fixed=false);
  Boolean _first(start=true);
  parameter Boolean _startValuesNotSet(fixed=false,start=true);
  Real fmi_dummy;
package fmi_Functions
    class fmiModel
      extends ExternalObject;
      function constructor "Initialize FMI model"
        extends Modelica.Icons.Function;
        input String instanceName;
        input Boolean loggingOn;
        input String resourceLocation;
        output fmiModel fmi;
        external"C" fmi = MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiInstantiateModel2(instanceName, loggingOn, resourceLocation)
        annotation(Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_Instantiate_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_Instantiate_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554Logger(fmi2ComponentEnvironment componentEnvironment, fmi2String instanceName, fmi2Status status,
  fmi2String category, fmi2String message, ...) {
  char msg[4096];
  char buf[4096];
  va_list ap;
  int len;
  va_start(ap,message);
#if defined(_MSC_VER) && _MSC_VER>=1200
  len = _snprintf(msg, sizeof(msg)/sizeof(*msg), \"%s: %s\", instanceName, message);
  if (len < 0) goto fail;
  len = _vsnprintf(buf, sizeof(buf)/sizeof(*buf) - 2, msg, ap);
  if (len < 0) goto fail;
#else
  len = snprintf(msg, sizeof(msg)/sizeof(*msg), \"%s: %s\", instanceName, message);
  if (len < 0) goto fail;
  len = vsnprintf(buf, sizeof(buf)/sizeof(*buf) - 2, msg, ap);
  if (len < 0) goto fail;
#endif
  if( len>0 && len < 4096 && buf[len - 1]!='\\n'){
    buf[len] = '\\n';
    buf[len + 1] = 0;
  }
  va_end(ap);
  switch (status) {
    case fmi2Fatal:
      ModelicaMessage(\"[fmi2Fatal]: \");
      break;
    case fmi2Error:
      ModelicaMessage(\"[fmi2Error]: \");
      break;
    case fmi2Discard:
      ModelicaMessage(\"[fmi2Discard]: \");
      break;
    case fmi2Warning:
      ModelicaMessage(\"[fmi2Warning]: \");
      break;
    case fmi2OK:
      ModelicaMessage(\"[fmi2OK]: \");
      break;
  }
  ModelicaMessage(buf);
  return;
fail:
  ModelicaMessage(\"Logger failed, message too long?\");
}
void * MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiInstantiateModel2(const char*instanceName, fmi2Boolean loggingOn, fmi2String resourceLocation) {
  static fmi2CallbackFunctions funcs = {&MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554Logger, &calloc, &free, NULL, NULL};
  struct dy_fmi2Extended* res;
  res = calloc(1, sizeof(struct dy_fmi2Extended));
  if (res!=0) {
    if (!(res->hInst=LoadLibraryW(L\"MSLHeatAdaptors_Utilities_ConductionME.dll\"))) {
      ModelicaError(\"Loading of FMU dynamic link library (MSLHeatAdaptors_Utilities_ConductionME.dll) failed!\");
      return 0;
    }
    if (!(res->dyFmiInstantiate=(fmi2InstantiateFunc)GetProcAddress(res->hInst,\"fmi2Instantiate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Instantiate!\");
      return 0;
    }
    if (!(res->dyFmiFreeInstance=(fmi2FreeInstanceFunc)GetProcAddress(res->hInst,\"fmi2FreeInstance\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2FreeInstance!\");
      return 0;
    }
    if (!(res->dyFmiSetupExperiment=(fmi2SetupExperimentFunc)GetProcAddress(res->hInst,\"fmi2SetupExperiment\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetupExperiment!\");
      return 0;
    }
    if (!(res->dyFmiEnterInitializationMode=(fmi2EnterInitializationModeFunc)GetProcAddress(res->hInst,\"fmi2EnterInitializationMode\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2EnterInitializationMode!\");
      return 0;
    }
    if (!(res->dyFmiExitInitializationMode=(fmi2ExitInitializationModeFunc)GetProcAddress(res->hInst,\"fmi2ExitInitializationMode\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2ExitInitializationMode!\");
      return 0;
    }
    if (!(res->dyFmiTerminate=(fmi2TerminateFunc)GetProcAddress(res->hInst,\"fmi2Terminate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Terminate!\");
      return 0;
    }
    if (!(res->dyFmiReset=(fmi2ResetFunc)GetProcAddress(res->hInst,\"fmi2Reset\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Reset!\");
      return 0;
    }
    if (!(res->dyFmiSetReal=(fmi2SetRealFunc)GetProcAddress(res->hInst,\"fmi2SetReal\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetReal!\");
      return 0;
    }
    if (!(res->dyFmiGetReal=(fmi2GetRealFunc)GetProcAddress(res->hInst,\"fmi2GetReal\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetReal!\");
      return 0;
    }
    if (!(res->dyFmiSetInteger=(fmi2SetIntegerFunc)GetProcAddress(res->hInst,\"fmi2SetInteger\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetInteger!\");
      return 0;
    }
    if (!(res->dyFmiGetInteger=(fmi2GetIntegerFunc)GetProcAddress(res->hInst,\"fmi2GetInteger\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetInteger!\");
      return 0;
    }
    if (!(res->dyFmiSetBoolean=(fmi2SetBooleanFunc)GetProcAddress(res->hInst,\"fmi2SetBoolean\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetBoolean!\");
      return 0;
    }
    if (!(res->dyFmiGetBoolean=(fmi2GetBooleanFunc)GetProcAddress(res->hInst,\"fmi2GetBoolean\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetBoolean!\");
      return 0;
    }
    if (!(res->dyFmiSetDebugLogging=(fmi2SetDebugLoggingFunc)GetProcAddress(res->hInst,\"fmi2SetDebugLogging\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetDebugLogging!\");
      return 0;
    }
    if (!(res->dyFmiSetString=(fmi2SetStringFunc)GetProcAddress(res->hInst,\"fmi2SetString\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetString!\");
      return 0;
    }
    if (!(res->dyFmiGetString=(fmi2GetStringFunc)GetProcAddress(res->hInst,\"fmi2GetString\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetString!\");
      return 0;
    }
    if (!(res->dyFmiSetContinuousStates=(fmi2SetContinuousStatesFunc)GetProcAddress(res->hInst,\"fmi2SetContinuousStates\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetContinuousStates!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiSetContinuousStates\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiGetContinuousStates=(fmi2GetContinuousStatesFunc)GetProcAddress(res->hInst,\"fmi2GetContinuousStates\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetContinuousStates!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiGetContinuousStates\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiSetTime=(fmi2SetTimeFunc)GetProcAddress(res->hInst,\"fmi2SetTime\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetTime!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiSetTime\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiCompletedIntegratorStep=(fmi2CompletedIntegratorStepFunc)GetProcAddress(res->hInst,\"fmi2CompletedIntegratorStep\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2CompletedIntegratorStep!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiCompletedIntegratorStep\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiEnterEventMode=(fmi2EnterEventModeFunc)GetProcAddress(res->hInst,\"fmi2EnterEventMode\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2EnterEventMode!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiEnterEventMode\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiNewDiscreteStates=(fmi2NewDiscreteStatesFunc)GetProcAddress(res->hInst,\"fmi2NewDiscreteStates\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2NewDiscreteStates!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiNewDiscreteStates\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiEnterContinuousTimeMode=(fmi2EnterContinuousTimeModeFunc)GetProcAddress(res->hInst,\"fmi2EnterContinuousTimeMode\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2EnterContinuousTimeMode!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiEnterContinuousTimeMode\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiGetDerivatives=(fmi2GetDerivativesFunc)GetProcAddress(res->hInst,\"fmi2GetDerivatives\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetDerivatives!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiGetDerivatives\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiGetEventIndicators=(fmi2GetEventIndicatorsFunc)GetProcAddress(res->hInst,\"fmi2GetEventIndicators\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetEventIndicators!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiGetEventIndicators\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiGetDirectionalDerivative=(fmi2GetDirectionalDerivativeFunc)GetProcAddress(res->hInst,\"fmi2GetDirectionalDerivative\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetDirectionalDerivative!\");
      return 0;
    }
    if (!(res->dyFmiGetFMUstate=(fmi2GetFMUstateFunc)GetProcAddress(res->hInst,\"fmi2GetFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiSetFMUstate=(fmi2SetFMUstateFunc)GetProcAddress(res->hInst,\"fmi2SetFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiFreeFMUstate=(fmi2FreeFMUstateFunc)GetProcAddress(res->hInst,\"fmi2FreeFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2FreeFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiSerializedFMUstateSize=(fmi2SerializedFMUstateSizeFunc)GetProcAddress(res->hInst,\"fmi2SerializedFMUstateSize\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SerializedFMUstateSize!\");
      return 0;
    }
    if (!(res->dyFmiSerializeFMUstate=(fmi2SerializeFMUstateFunc)GetProcAddress(res->hInst,\"fmi2SerializeFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SerializeFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiDeSerializeFMUstate=(fmi2DeSerializeFMUstateFunc)GetProcAddress(res->hInst,\"fmi2DeSerializeFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2DeSerializeFMUstate!\");
      return 0;
    }
    res->m=res->dyFmiInstantiate(instanceName, fmi2ModelExchange, \"{78afa784-35f4-46dd-b5b2-866345055d54}\",resourceLocation, &funcs, fmi2False, loggingOn);
    if (0==res->m) {free(res);res=0;ModelicaError(\"InstantiateModel failed\");}
    else {res->dyTriggered=0;res->dyTime=res->dyLastTime=-1e37;res->discreteInputChanged=1;res->currentMode=dyfmi2InstantiationMode;res->dyLastStepTime=0;res->dyFMUstate=NULL;}
  }
  return res;
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
      end constructor;

      function destructor "Release storage of FMI model"
        extends Modelica.Icons.Function;
        input fmiModel fmi;
        external"C"
                   MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiFreeModelInstance2(fmi);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_Free_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_Free_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiFreeModelInstance2(void*m) {
  struct dy_fmi2Extended*a=m;
  if (a) {
    if(a->dyFMUstate)
    a->dyFmiFreeFMUstate(a->m, &a->dyFMUstate);
    /*a->dyFmiSetDebugLogging(a->m,fmi2True,0,NULL);*/
    a->dyFmiTerminate(a->m);
    a->dyFmiFreeInstance(a->m);
    FreeLibrary(a->hInst);
    free(a);
  }
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
      end destructor;
    end fmiModel;

    function fmiSetTime
    input fmiModel fmi;
    input Real ti;
    external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSetTime2(fmi, ti);
    annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_SetTime_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_SetTime_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSetTime2(void*m, double ti) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    if(ti > a->dyTime || (a->currentMode == dyfmi2EventMode && ti==a->dyTime && !isModelicaEvent())){
      a->dyTime=ti;
      if(a->currentMode == dyfmi2EventMode){
        status = a->dyFmiEnterContinuousTimeMode(a->m);
        if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterContinuousTimeMode failed!\");
        a->currentMode = dyfmi2ContinuousTimeMode;
      }
      status=a->dyFmiSetTime(a->m, ti);
    }else if(ti < a->dyTime && a->currentMode == dyfmi2ContinuousTimeMode){
       a->dyTime=ti;
       status=a->dyFmiSetTime(a->m, ti);
    }else{
       status=fmi2OK;
    }
  }
  if (status!=fmi2OK ) ModelicaError(\"SetTime failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME",__Dymola_IdemPotent=true);
    end fmiSetTime;

    function fmiSetContinuousStates
    input fmiModel fmi;
    input Real x[:];
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSetContinuousStates2(
       fmi,
       x,
       size(x, 1));
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_SetContinuousStates_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_SetContinuousStates_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSetContinuousStates2(void*m, const double*x, size_t nx) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    if(a->currentMode == dyfmi2ContinuousTimeMode){
     status=a->dyFmiSetContinuousStates(a->m, x, nx);
    }else{
     status=fmi2OK;
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetContinuousStates failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiSetContinuousStates;

    function fmiGetContinuousStates
    input fmiModel fmi;
    input Integer nx;
    output Real x[nx];
    input Real preAvailable;
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetContinuousStates2(
        fmi,
        x,
        nx);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetContinuousStates_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetContinuousStates_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetContinuousStates2(void*m, double*x, int nx) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetContinuousStates(a->m, x, nx);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetContinuousStates failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiGetContinuousStates;

    function fmiCompletedIntegratorStep
    input fmiModel fmi;
    input Real dummyTime;
    output Real crossing;
      external"C" crossing = MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiCompletedIntegratorStep2(fmi);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_CompletedIntegratorStep_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_CompletedIntegratorStep_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
double MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiCompletedIntegratorStep2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status = fmi2Fatal;
  fmi2Boolean enterEventMode = fmi2False;
  fmi2Boolean terminateSimulation = fmi2False;
  if (a) {
    if (a->dyTime>a->dyLastTime) {
      status=a->dyFmiCompletedIntegratorStep(a->m, fmi2True, &enterEventMode, &terminateSimulation);
      if(terminateSimulation == fmi2True) terminate(\"Terminate signaled by FMU after call to fmiCompletedIntegratorStep\");
      a->dyLastTime=a->dyTime;
      if (enterEventMode == fmi2True) a->dyTriggered=1;
    } else status=fmi2OK;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"CompletedIntegratorStep failed\");
  return a->dyTriggered && a->dyTime>=a->dyLastTime;
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiCompletedIntegratorStep;

    function fmiEnterModelInitialization
    input fmiModel fmi;
    input Real startTime;
    external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiEnterModelInitialization2(fmi, startTime);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiEnterModelInitialization_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiEnterModelInitialization_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiEnterModelInitialization2(void*m, double startTime) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  fmi2Boolean toleranceControlled=fmi2False;
  fmi2Real tolerance=0;
  if (a) {
    if(a->currentMode==dyfmi2InstantiationMode){
      a->dyTime=startTime;
      status=a->dyFmiSetupExperiment(a->m, fmi2False, 0, a->dyTime, fmi2False, 0);
      status=a->dyFmiEnterInitializationMode(a->m);
      a->currentMode=dyfmi2InitializationMode;
      a->dyTriggered=0;
      a->dyLastTime=a->dyTime;
    }else{
      status=fmi2OK;
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"Initialize failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiEnterModelInitialization;

    function fmiExitModelInitializationMode
    input fmiModel fmi;
    output Real dummy=1.0;
    external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiExitModelInitializationMode2(fmi);
    annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiExitModelInitializationMode_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiExitModelInitializationMode_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiExitModelInitializationMode2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiExitInitializationMode(a->m);
    a->dyTriggered=0;
    a->dyLastTime=a->dyTime;
    a->currentMode = dyfmi2EventMode;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiExitModelInitialization failed!\");
  return;
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiExitModelInitializationMode;

    function fmiUpdateDiscreteStates
    input fmiModel fmi;
    output Integer nextMode;
    output Real tNext;
    output Boolean stateValuesChanged;
    external"C" nextMode = MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiUpdateDiscreteStates2(fmi, tNext, stateValuesChanged);
      annotation(Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_UpdateDiscreteStates_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_UpdateDiscreteStates_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
int MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiUpdateDiscreteStates2(void*m, double* tNext, int* stateValuesChanged){
  struct dy_fmi2Extended*a=m;
  fmi2EventInfo ev;
  fmi2Status status=fmi2Fatal;
  ev.nextEventTime=1e37;
  ev.newDiscreteStatesNeeded=fmi2False;
  ev.valuesOfContinuousStatesChanged=fmi2False;
  ev.nextEventTimeDefined=fmi2False;
  if (a) {
    if(a->currentMode == dyfmi2ContinuousTimeMode){
      status = a->dyFmiEnterEventMode(a->m);
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
      a->currentMode = dyfmi2EventMode;
    }
  status=a->dyFmiNewDiscreteStates(a->m, &ev);
  a->dyTriggered=0;
  a->dyLastTime=a->dyTime;
  a->discreteInputChanged=0;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"EventUpdate failed\");
  if (ev.terminateSimulation){
    terminate(\"Terminate signaled by FMU\");
  }
  if(ev.nextEventTimeDefined==fmi2True){
    *tNext=ev.nextEventTime;
  }else{
    *tNext=1e37;
  }
  *stateValuesChanged = ev.valuesOfContinuousStatesChanged;
  return ev.newDiscreteStatesNeeded;
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiUpdateDiscreteStates;

    function fmiGetDerivatives
    input fmiModel fmi;
    input Integer nx;
    output Real dx[nx];
    external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetDerivatives2(
    fmi,
      dx,
      nx);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetDerivatives_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetDerivatives_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetDerivatives2(void*m,double*dx,int nx) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetDerivatives(a->m, dx, nx);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetDerivatives failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiGetDerivatives;

    function fmiGetEventIndicators
    input fmiModel fmi;
    input Integer nz;
    output Real z[nz];
    external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetEventIndicators2(
      fmi,
      z,
      nz);
    annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetEventIndicators_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetEventIndicators_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetEventIndicators2(void*m,double*z,int nz) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    if(a->currentMode == dyfmi2ContinuousTimeMode || a->currentMode == dyfmi2EventMode){
      status=a->dyFmiGetEventIndicators(a->m, z, nz);
    }else{
      status=fmi2OK;    }
;  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetEventIndicators failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiGetEventIndicators;

    function fmiReset
      input fmiModel fmi;
      output Boolean resetOK;
      external"C" resetOK = MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiReset2(fmi);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_Reset_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_Reset_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
double MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiReset2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiReset(a->m);
    a->currentMode=dyfmi2InstantiationMode;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiReset failed\");
    return 1.0;
  }
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiReset;

    function fmiGetRealScalar
      input fmiModel fmi;
      input Integer ref;
      output Real val;
    algorithm
        val := scalar(fmiGetReal(fmi, {ref}));
    end fmiGetRealScalar;

    function fmiGetReal
      input fmiModel fmi;
      input Integer refs[:];
      output Real vals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetReal_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetReal2(void*m, const int*refs, size_t nrefs, double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetReal failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiGetReal;

    function fmiGetRealwf
      input fmiModel fmi;
      input Integer refs[:];
      input Real preAvailable;
      output Real vals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetReal_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetReal2(void*m, const int*refs, size_t nrefs, double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetReal failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiGetRealwf;

    function fmiSetReal
      input fmiModel fmi;
      input Integer refs[:];
      input Real vals[size(refs, 1)];
      external"C"
                 MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_SetReal_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_SetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSetReal2(void*m, const int*refs, size_t nrefs, const double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetReal failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetReal;

    function fmiSetRealwf
      input fmiModel fmi;
      input Integer refs[:];
      input Real vals[size(refs, 1)];
      input Real preAvailable;
      output Real postAvailable=preAvailable;
      external"C"
                 MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_SetReal_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_SetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSetReal2(void*m, const int*refs, size_t nrefs, const double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetReal failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetRealwf;

    function fmiGetIntegerScalar
      input fmiModel fmi;
      input Integer ref;
      output Integer val;
    algorithm
        val := scalar(fmiGetInteger(fmi, {ref}));
    end fmiGetIntegerScalar;

    function fmiGetInteger
      input fmiModel fmi;
      input Integer refs[:];
      output Integer vals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetInteger_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetInteger_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetInteger2(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiGetInteger;

    function fmiGetIntegerwf
      input fmiModel fmi;
      input Integer refs[:];
      input Integer preAvailable;
      output Integer vals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetInteger_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetInteger_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetInteger2(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiGetIntegerwf;

    function fmiSetInteger
      input fmiModel fmi;
      input Integer refs[:];
      input Integer vals[size(refs, 1)];
    protected
      Integer oldVals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        oldVals);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_SetInteger_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_SetInteger_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSetInteger2(void*m, const int*refs, size_t nrefs, int*vals, int*oldVals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  size_t i = 0;
  if(!nrefs){return;}
  if (a) {
    if(!a->discreteInputChanged){
      status=a->dyFmiGetInteger(a->m, refs, nrefs, oldVals);
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed in SetInteger\");
      for( i = 0; i < nrefs; ++i){
        if(oldVals[i] != vals[i]){
          a->discreteInputChanged = 1;
          break;
        }
      }
    }
    if(a->discreteInputChanged){
      if(a->currentMode == dyfmi2ContinuousTimeMode){
        status = a->dyFmiEnterEventMode(a->m);
        if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
        a->currentMode = dyfmi2EventMode;
      }
      status=a->dyFmiSetInteger(a->m, refs, nrefs, vals);
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetInteger failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetInteger;

    function fmiGetBooleanScalar
      input fmiModel fmi;
      input Integer ref;
      output Boolean val;
    algorithm
        val := scalar(fmiGetBoolean(fmi, {ref}));
    end fmiGetBooleanScalar;

    function fmiGetBoolean
      input fmiModel fmi;
      input Integer refs[:];
      output Boolean vals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetBoolean_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetBoolean2(void*m, const int* refs, size_t nr, int* vals) {
  int i;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(vals));
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed\");
    for(i=nr-1;i>=0;i--) vals[i]=((fmi2Boolean*)(vals))[i];
  }
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiGetBoolean;

    function fmiGetBooleanwf
      input fmiModel fmi;
      input Integer refs[:];
      input Integer preAvailable;
      output Boolean vals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetBoolean_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiGetBoolean2(void*m, const int* refs, size_t nr, int* vals) {
  int i;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(vals));
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed\");
    for(i=nr-1;i>=0;i--) vals[i]=((fmi2Boolean*)(vals))[i];
  }
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiGetBooleanwf;

    function fmiSetBoolean
      input fmiModel fmi;
      input Integer refs[:];
      input Boolean vals[size(refs, 1)];
    protected
      Boolean dummy[size(refs, 1)];
      Boolean oldVals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        dummy,
        oldVals);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_SetBoolean_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_SetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSetBoolean2(void*m, const int* refs, size_t nr, const int* vals, int* dummy, int* oldVals) {
  size_t i;
  int j;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nr){return;}
  for(i=0;i<nr;++i) ((fmi2Boolean*)(dummy))[i]=vals[i];
  if (a) {
    if(!a->discreteInputChanged){
      status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(oldVals));
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed in SetBoolean\");
      for(j=nr-1;j>=0;j--){
        oldVals[j]=((fmi2Boolean*)(oldVals))[j];
        if(oldVals[j] != dummy[j]){
          a->discreteInputChanged = 1;
          break;
        }
      }
    }
    if(a->discreteInputChanged){
      if(a->currentMode == dyfmi2ContinuousTimeMode){
        status = a->dyFmiEnterEventMode(a->m);
        if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
        a->currentMode = dyfmi2EventMode;
      }
      status=a->dyFmiSetBoolean(a->m, refs, nr, (fmi2Boolean*)(dummy));
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetBoolean failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetBoolean;

    function fmiSetString
      input fmiModel fmi;
      input Integer refs[:];
      input String vals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSetString2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_SetString_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_SetString_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSetString2(void*m, const int*refs, size_t nrefs,const fmi2String vals[]) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  size_t i = 0;
  if(!nrefs){return;}
  if (a) {
    if(a->currentMode == dyfmi2ContinuousTimeMode){
      status = a->dyFmiEnterEventMode(a->m);
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
      a->currentMode = dyfmi2EventMode;
    }
    status=a->dyFmiSetString(a->m, refs, nrefs, vals);
    a->discreteInputChanged = fmi2True;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetString failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetString;

    function fmiGetDirectionalDerivative
      input fmiModel fmi;
      input Integer z_refs[:];
      input Integer v_refs[:];
      input Real dv[size(v_refs, 1)];
      output Real dz[size(z_refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetDirectionalDerivative2(
        fmi,
        z_refs,
        size(z_refs, 1),
        v_refs,
        size(v_refs, 1),
        dv,
        dz);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetDirectionalDerivative2_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetDirectionalDerivative2_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_GetDirectionalDerivative2(void*m, const int* zref, size_t nzr, const int* vrefs, size_t nvr, const double *dv, double *dz) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetDirectionalDerivative(a->m, zref, nzr, vrefs, nvr, dv, dz);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiGetDirectionalDerivative failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiGetDirectionalDerivative;

    function CheckIfDiscreteValueSet
      input fmiModel fmi;
      input Real dummyTime;
      input Real realInputs[:];
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      input Integer realInputValueReferences[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      input Real dummyRealOutputs[:];
      input Boolean dummyBooleanOutputs[:];
      input Integer dummyIntegerOutputs[:];
      output Real DiscreteInputSet;
    algorithm
      fmiSetReal(fmi, realInputValueReferences, realInputs);
      fmiSetBoolean(fmi, booleanInputValueReferences, booleanInputs);
      fmiSetInteger(fmi, integerInputValueReferences, integerInputs);
      DiscreteInputSet := fmiCheckIfDiscreteValueSet(fmi);
      annotation(LateInline=true);
    end CheckIfDiscreteValueSet;

    function fmiCheckIfDiscreteValueSet
      input fmiModel fmi;
      output Real DiscreteInputSet;
      external "C" DiscreteInputSet = MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiCheckIfDiscreteValueSet2(fmi);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiCheckIfDiscreteValueSet_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiCheckIfDiscreteValueSet_C 1
#include \"FMI/fmi2Import.h\"
double MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiCheckIfDiscreteValueSet2(void*m) {
  struct dy_fmi2Extended*a=m;
  if (a) {
    return a->discreteInputChanged;
  }
  ModelicaError(\"fmiCheckIfDiscreteValueSet2 failed!\");
  return 0;
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiCheckIfDiscreteValueSet;

    function GetEventIndicators
      input fmiModel fmi;
      input Integer nz;
      output Real z[nz];
      input Real dummyTime;
      input Real realInputs[:];
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputVariableReferences[:];
    algorithm
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      z := fmiGetEventIndicators(fmi, nz);
      annotation(LateInline=true);
    end GetEventIndicators;

    function noHysteresis
      input Real x;
      output Real y;
    algorithm
      y:=x+(if (x < 0) then -1 else 1);
    end noHysteresis;

    function GetRealVariable
      input fmiModel fmi;
      input Real Time;
      input Real realInputs[:];
      input Real realLinearDependentInputs[:];
      input Real states[:];
      input Real linearDependentStates[:];
      input Real linearOffset=0;
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer realLinearDependentInputsValueReferences[:];
      input Integer statesValueRefernces[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputValueReferences[:];
      input Integer outputValueReference[:];
      output Real outputVariable;
    algorithm
      //fmi_Functions.fmiSetTime(fmi, Time);
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetReal(fmi,realLinearDependentInputsValueReferences,realLinearDependentInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      //SetString(fmi,stringInputValueReferences,stringInputs);
      outputVariable:=fmiGetRealScalar(fmi,outputValueReference[1]);
      annotation(derivative(noDerivative=realLinearDependentInputs,noDerivative=linearDependentStates)=derGetRealVariable, LateInline=true);
    end GetRealVariable;

    function derGetRealVariable
      input fmiModel fmi;
      input Real Time;
      input Real realInputs[:];
      input Real realLinearDependentInputs[:];
      input Real states[:];
      input Real linearDependentStates[:];
      input Real linearOffset=0;
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer realLinearDependentInputsValueReferences[:];
      input Integer statesValueRefernces[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputValueReferences[:];
      input Integer outputValueReference[:];
      input Real derRealInputs[:];
      input Real derStates[:];
      input Real derLinearOffsets;
      output Real derOutputVariable;
    protected
      Real dummy[1];
    algorithm
      //fmi_Functions.fmiSetTime(fmi, Time);
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetReal(fmi,realLinearDependentInputsValueReferences,realLinearDependentInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      //setString(fmi,stringInputValueReferences,stringInputs);
      dummy:=fmiGetDirectionalDerivative(fmi, outputValueReference,  cat(1,realInputValueReferences,statesValueRefernces), cat(1,derRealInputs,derStates));
      derOutputVariable:=dummy[1]+derLinearOffsets;
      annotation(LateInline=true);
    end derGetRealVariable;

    function fmiSaveFMUState
      input fmiModel fmi;
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSaveFMUState2(fmi);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSaveFMUState_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSaveFMUState_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSaveFMUState2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status = a->dyFmiGetFMUstate(a->m, &a->dyFMUstate);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiGetFMUstate failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiSaveFMUState;

    function fmiRestoreFMUState
      input fmiModel fmi;
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiRestoreFMUState2(fmi);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiRestoreFMUState_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiRestoreFMUState_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiRestoreFMUState2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status = a->dyFmiSetFMUstate(a->m, a->dyFMUstate);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiSetFMUstate failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiRestoreFMUState;

    function fmiSerializeFMUstate
      input fmiModel fmi;
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSerializeFMUstate2(fmi);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSerializeFMUstate_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSerializeFMUstate_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiSerializeFMUstate2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status = a->dyFmiGetFMUstate(a->m, &a->dyFMUstate);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiGetFMUstate failed\");
    status = a->dyFmiSerializedFMUstateSize(a->m, a->dyFMUstate, &a->dyFMUStateSize);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiSerializedFMUstateSize failed\");
    if( a->dySerializeFMUstate) free(a->dySerializeFMUstate); a->dySerializeFMUstate = NULL;
    a->dySerializeFMUstate = malloc(a->dyFMUStateSize);
    if(!a->dySerializeFMUstate)  ModelicaError(\"malloc call to allocate SerializeFMUstate failed\");
    status = a->dyFmiSerializeFMUstate(a->m, a->dyFMUstate, a->dySerializeFMUstate, a->dyFMUStateSize);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiSerializeFMUstate failed\");
  }
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiSerializeFMUstate;

    function fmiDeSerializeFMUstate
      input fmiModel fmi;
      external"C" MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiDeSerializeFMUstate2(fmi);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiDeSerializeFMUstate_C
#define MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiDeSerializeFMUstate_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionME78784354465286634505554_fmiDeSerializeFMUstate2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    if(!a->dySerializeFMUstate) ModelicaError(\"serializedFmuState is not allocated!!!\");
    if(a->dyFMUstate){
      a->dyFmiFreeFMUstate(a->m, a->dyFMUstate);
      a->dyFMUstate = NULL;    }
    status = a->dyFmiDeSerializeFMUstate(a->m, a->dySerializeFMUstate, a->dyFMUStateSize, &a->dyFMUstate);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiDeSerializeFMUstate failed\");
    status = a->dyFmiSetFMUstate(a->m, a->dyFMUstate);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiSetFMUstate failed\");
  }
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionME", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionME_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionME/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionME");
    end fmiDeSerializeFMUstate;

    function setTimeAndStates
      input fmiModel fmu;
      input Real Time;
      input Real States[:];
      input Real dummy;
      output Real tOut=Time;
    algorithm
      fmiSetTime(fmu, Time);
      fmiSetContinuousStates(fmu,States);
      annotation(derivative(noDerivative=dummy,noDerivative=States)=dTS);
    end setTimeAndStates;

    function dTS
      input fmiModel fmu;
      input Real Time;
      input Real States[:];
      input Real dummy;
      input Real dTime;
      output Real dt;
    algorithm
      dt:=1;
      annotation(derivative(order=2)=ddTS);
    end dTS;

    function ddTS
      input fmiModel fmu;
      input Real Time;
      input Real States[:];
      input Real dummy;
      input Real dTime;
      input Real ddTime;
      output Real ddt;
    algorithm
      ddt:=0;
    end ddTS;
end fmi_Functions;
algorithm
  when initial() then
    if _first then
      _first := false;
      fmi := fmi_Functions.fmiModel(fmi_instanceName, fmi_loggingOn, fmi_resourceLocation);
    end if;
  end when;
initial algorithm
  if _startValuesNotSet then
  fmi_Functions.fmiSetReal(fmi, {16777216}, {G});
  fmi_Functions.fmiSetReal(fmi, {352321536, 352321537}, {_T1_start, _T2_start});
  fmi_Functions.fmiEnterModelInitialization(fmi, time);
  _startValuesNotSet :=false;
  end if;
  myTimeStart := time;
equation
  when not initial() then
    fmi_dummy = fmi_Functions.fmiExitModelInitializationMode(fmi);
  {thermalConductor.G} = fmi_Functions.fmiGetRealwf(fmi, {100663307}, fmi_dummy);
  end when;
  myTime = fmi_Functions.setTimeAndStates(fmi, time, fill(0.0,0), fmi_dummy);
  fmi_StepEvent = fmi_Functions.fmiCompletedIntegratorStep(fmi, myTime)>0.5;
  fmi_DiscreteInputChanged= fmi_Functions.CheckIfDiscreteValueSet(fmi, myTime, {T1, T2}, fill(false,0), fill(0,0), {352321536, 352321537}, fill(0,0), fill(0,0), {Q_flow1, Q_flow2}, fill(false,0), fill(0,0))  > 0.5;
  fmi_flip = ( if ( fmi_DiscreteInputChanged or not pre(fmi_iterationConverged)) then not pre(fmi_flip) else pre(fmi_flip));
  when {time>=pre(fmi_TNext), fmi_StepEvent, fmi_flip, not fmi_flip, fmi_StepEvent} then
    (fmi_NextMode, fmi_TNext, fmi_NewStates) =  fmi_Functions.fmiUpdateDiscreteStates(fmi);
    fmi_iterationConverged = if fmi_NextMode == 0 then true else false;
  end when;
  if initial() then
    Q_flow1 = fmi_Functions.GetRealVariable(fmi, myTimeStart, {G, T1, T2}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777216, 352321536, 352321537}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544320});
  else
    Q_flow1 = fmi_Functions.GetRealVariable(fmi, myTime, {T1, T2}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321536, 352321537}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544320});
  end if;
  if initial() then
    Q_flow2 = fmi_Functions.GetRealVariable(fmi, myTimeStart, {G, T1, T2}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777216, 352321536, 352321537}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544321});
  else
    Q_flow2 = fmi_Functions.GetRealVariable(fmi, myTime, {T1, T2}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {352321536, 352321537}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544321});
  end if;
{temperatureToHeatFlow1.p, temperatureToHeatFlow1.heatPort.Q_flow, thermalConductor.dT, thermalConductor.port_b.T} = fmi_Functions.fmiGetRealwf(fmi, {436207616, 369098761, 369098762, 436207617}, if initial() then myTimeStart else myTime);
//alias Declarations
  temperatureToHeatFlow1.f = Q_flow1;
  thermalConductor.Q_flow = Q_flow1;
  thermalConductor.port_a.Q_flow = Q_flow1;
  temperatureToHeatFlow2.heatPort.Q_flow = Q_flow1;
  thermalConductor.port_b.Q_flow = temperatureToHeatFlow1.heatPort.Q_flow;
  temperatureToHeatFlow2.f = temperatureToHeatFlow1.heatPort.Q_flow;
  temperatureToHeatFlow1.heatPort.T = temperatureToHeatFlow1.p;
  thermalConductor.port_a.T = temperatureToHeatFlow1.p;
  temperatureToHeatFlow2.p = thermalConductor.port_b.T;
  temperatureToHeatFlow2.heatPort.T = thermalConductor.port_b.T;
  annotation (__Dymola_FMUImportVersion="Dymola 2021", __Dymola_FMUImportPath="C:/Users/FRICKL/Desktop/TESsystem/MSLHeatAdaptors_Utilities_ConductionME.fmu", __Dymola_FMUImportIncludeAllVariables="true", __Dymola_FMUImportIntegrate="true", experiment(StartTime=0.0, StopTime=1.0, Tolerance=0.0001),
    Icon(graphics={
      Text(extent={{-150,150},{150,110}},
        lineColor={0,0,255},
        textString="%name"),
      Text(extent={{-150,-110},{150,-150}},
        lineColor={95,95,95},
        textString="FMI 2.0 ME")}),
Documentation(info="<html>
<h4>ModelDescription Attributes</h4>
<ul>
<li>fmiVersion = 2.0</li>
<li>modelName = MSLHeatAdaptors_Utilities_ConductionME</li>
<li>generationTool = Dymola Version 2021 (64-bit), 2020-05-13</li>
<li>generationDateAndTime = 2020-10-27T03:05:44Z</li>
</ul>
<p><br><b>Model Exchange Attributes</b></p>
<ul>
<li>needsExecutionTool = false</li>
<li>completedIntegratorStepNotNeeded = false</li>
<li>canBeInstantiatedOnlyOncePerProcess = false</li>
<li>canNotUseMemoryManagementFunctions = false</li>
<li>canGetAndSetFMUstate = true</li>
<li>canSerializeFMUstate = true</li>
<li>providesDirectionalDerivative = true</li>
</ul>
</html>"));
end MSLHeatAdaptors_Utilities_ConductionME_fmu;
