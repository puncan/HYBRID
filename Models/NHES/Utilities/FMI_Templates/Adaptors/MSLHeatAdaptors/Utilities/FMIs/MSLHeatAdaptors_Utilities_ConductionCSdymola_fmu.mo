within NHES.Utilities.FMI_Templates.Adaptors.MSLHeatAdaptors.Utilities.FMIs;
model MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu
  "Input/output block of a conduction model"
extends fmuIcon;
// Model automatically generated by Dymola from FMI model description
public
  type Modelica_Blocks_Interfaces_RealInput = Real;
  type Modelica_Blocks_Interfaces_RealOutput = Real;
  parameter Modelica.Units.SI.ThermalConductance G=1 "Thermal conductance";
protected
  record temperatureToHeatFlow1_rec
    Modelica_Blocks_Interfaces_RealInput p(unit = "K", displayUnit = "degC") "Input for potential";
    Modelica_Blocks_Interfaces_RealOutput f(unit = "W") "Output for flow";
  protected
    record heatPort_rec
      Modelica.Units.SI.Temperature T "Port temperature";
      Modelica.Units.SI.HeatFlowRate Q_flow
        "Heat flow rate (positive if flowing from outside into the component)";
    end heatPort_rec;
  public
    heatPort_rec heatPort;
  end temperatureToHeatFlow1_rec;
public
  temperatureToHeatFlow1_rec temperatureToHeatFlow1;
protected
  record thermalConductor_rec
    Modelica.Units.SI.HeatFlowRate Q_flow
      "Heat flow rate from port_a -> port_b";
    Modelica.Units.SI.TemperatureDifference dT "port_a.T - port_b.T";
    Modelica.Units.SI.ThermalConductance G
      "Constant thermal conductance of material";
  protected
    record port_a_rec
      Modelica.Units.SI.Temperature T "Port temperature";
      Modelica.Units.SI.HeatFlowRate Q_flow
        "Heat flow rate (positive if flowing from outside into the component)";
    end port_a_rec;
  public
    port_a_rec port_a;
  protected
    record port_b_rec
      Modelica.Units.SI.Temperature T "Port temperature";
      Modelica.Units.SI.HeatFlowRate Q_flow
        "Heat flow rate (positive if flowing from outside into the component)";
    end port_b_rec;
  public
    port_b_rec port_b;
  end thermalConductor_rec;
public
  thermalConductor_rec thermalConductor;
protected
  record temperatureToHeatFlow2_rec
    Modelica_Blocks_Interfaces_RealInput p(unit = "K", displayUnit = "degC") "Input for potential";
    Modelica_Blocks_Interfaces_RealOutput f(unit = "W") "Output for flow";
  protected
    record heatPort_rec
      Modelica.Units.SI.Temperature T "Port temperature";
      Modelica.Units.SI.HeatFlowRate Q_flow
        "Heat flow rate (positive if flowing from outside into the component)";
    end heatPort_rec;
  public
    heatPort_rec heatPort annotation(Dialog);
  end temperatureToHeatFlow2_rec;
public
  temperatureToHeatFlow2_rec temperatureToHeatFlow2 annotation(Dialog);
  parameter Real _T1_start = 288.15
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _T1_old;
public
  Modelica.Blocks.Interfaces.RealInput T1(unit = "K", displayUnit = "degC", nominal = 300.0, min = 0.0, start = _T1_start) "Temperature of left heatPort of conduction element"
  annotation (Placement(transformation(extent={{-124,14},{-84,54}})));
  parameter Real _T2_start = 288.15
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _T2_old;
public
  Modelica.Blocks.Interfaces.RealInput T2(unit = "K", displayUnit = "degC", nominal = 300.0, min = 0.0, start = _T2_start) "Temperature of right heatPort of conduction element"
  annotation (Placement(transformation(extent={{-124,-53},{-84,-13}})));
  Modelica.Blocks.Interfaces.RealOutput Q_flow1(unit = "W") "Heat flow generated by the conduction element"
  annotation (Placement(transformation(extent={{100,14},{140,54}})));
  Modelica.Blocks.Interfaces.RealOutput Q_flow2(unit = "W") "Heat flow generated by the conduction element"
  annotation (Placement(transformation(extent={{100,-53},{140,-13}})));
public
  parameter String fmi_instanceName="MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu"
  annotation (Dialog(tab="FMI", group="Instance name"));
  parameter Boolean fmi_loggingOn=false
  annotation (Dialog(tab="FMI", group="Enable logging"));
  parameter Boolean fmi_InputTime=false
  "Time point of input used when calling doStep."
  annotation (Evaluate=true,Dialog(tab="FMI", group="Input Handling"),choices(choice= false "StepEnd", choice= true "StepStart"));
  parameter Boolean fmi_UsePreOnInputSignals=true
  annotation (Evaluate=true,Dialog(tab="FMI", group="Input Handling"));
  parameter Real fmi_StartTime = 0.0
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_StopTime = 1.0
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_NumberOfSteps = 500
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_CommunicationStepSize=(fmi_StopTime-fmi_StartTime)/fmi_NumberOfSteps
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Integer stepSizeScaleFactor = 1 "Number of doSteps called between two CommunicationStepSize"
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Boolean fmi_forceShutDownAtStopTime=false
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_rTol=1e-6 "relative tolerance for the internal solver of the fmu"
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter String fmi_resourceLocation="file:///"+ModelicaServices.ExternalReferences.loadResource("modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/resources")
  annotation (Dialog(tab="FMI", group="Instantiation"));
protected
  fmi_Functions.fmiModel fmi;
  Boolean fmi_exitInit(start=false,fixed=true);
  Boolean fmi_flip(start=false,fixed=true);
  parameter Real fmi_rdum(start=0,fixed=false);
  parameter Integer fmi_idum(start=0,fixed=false);
  Boolean fmi_StepOK;
  parameter Real zeroOffset = 0;
  parameter Real myTimeStart(fixed=false);
  record 'Internal '
    Real Q_flow1;
    Real Q_flow2;
  end 'Internal ';
  'Internal ' internal;
Real RealVariables[4];
Real RealFixedLocal[1];
package fmi_Functions
    class fmiModel
      extends ExternalObject;
      function constructor "Initialize FMI model"
        extends Modelica.Icons.Function;
        input String instanceName;
        input Boolean loggingOn;
        input String resourceLocation;
        output fmiModel fmi;
        external"C" fmi = MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiInstantiateModel2(instanceName, loggingOn, resourceLocation)
        annotation(Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_Instantiate_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_Instantiate_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554Logger(fmi2ComponentEnvironment componentEnvironment, fmi2String instanceName, fmi2Status status,
  fmi2String category, fmi2String message, ...) {
  char msg[4096];
  char buf[4096];
  va_list ap;
  int len;
  va_start(ap,message);
#if defined(_MSC_VER) && _MSC_VER>=1200
  len = _snprintf(msg, sizeof(msg)/sizeof(*msg), \"%s: %s\", instanceName, message);
  if (len < 0) goto fail;
  len = _vsnprintf(buf, sizeof(buf)/sizeof(*buf) - 2, msg, ap);
  if (len < 0) goto fail;
#else
  len = snprintf(msg, sizeof(msg)/sizeof(*msg), \"%s: %s\", instanceName, message);
  if (len < 0) goto fail;
  len = vsnprintf(buf, sizeof(buf)/sizeof(*buf) - 2, msg, ap);
  if (len < 0) goto fail;
#endif
  if( len>0 && len < 4096 && buf[len - 1]!='\\n'){
    buf[len] = '\\n';
    buf[len + 1] = 0;
  }
  va_end(ap);
  switch (status) {
    case fmi2Fatal:
      ModelicaMessage(\"[fmi2Fatal]: \");
      break;
    case fmi2Error:
      ModelicaMessage(\"[fmi2Error]: \");
      break;
    case fmi2Discard:
      ModelicaMessage(\"[fmi2Discard]: \");
      break;
    case fmi2Warning:
      ModelicaMessage(\"[fmi2Warning]: \");
      break;
    case fmi2OK:
      ModelicaMessage(\"[fmi2OK]: \");
      break;
  }
  ModelicaMessage(buf);
  return;
fail:
  ModelicaMessage(\"Logger failed, message too long?\");
}
void * MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiInstantiateModel2(const char*instanceName, fmi2Boolean loggingOn, fmi2String resourceLocation) {
  static fmi2CallbackFunctions funcs = {&MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554Logger, &calloc, &free, NULL, NULL};
  struct dy_fmi2Extended* res;
  res = calloc(1, sizeof(struct dy_fmi2Extended));
  if (res!=0) {
    if (!(res->hInst=LoadLibraryW(L\"MSLHeatAdaptors_Utilities_ConductionCSdymola.dll\"))) {
      ModelicaError(\"Loading of FMU dynamic link library (MSLHeatAdaptors_Utilities_ConductionCSdymola.dll) failed!\");
      return 0;
    }
    if (!(res->dyFmiInstantiate=(fmi2InstantiateFunc)GetProcAddress(res->hInst,\"fmi2Instantiate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Instantiate!\");
      return 0;
    }
    if (!(res->dyFmiFreeInstance=(fmi2FreeInstanceFunc)GetProcAddress(res->hInst,\"fmi2FreeInstance\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2FreeInstance!\");
      return 0;
    }
    if (!(res->dyFmiSetupExperiment=(fmi2SetupExperimentFunc)GetProcAddress(res->hInst,\"fmi2SetupExperiment\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetupExperiment!\");
      return 0;
    }
    if (!(res->dyFmiEnterInitializationMode=(fmi2EnterInitializationModeFunc)GetProcAddress(res->hInst,\"fmi2EnterInitializationMode\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2EnterInitializationMode!\");
      return 0;
    }
    if (!(res->dyFmiExitInitializationMode=(fmi2ExitInitializationModeFunc)GetProcAddress(res->hInst,\"fmi2ExitInitializationMode\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2ExitInitializationMode!\");
      return 0;
    }
    if (!(res->dyFmiTerminate=(fmi2TerminateFunc)GetProcAddress(res->hInst,\"fmi2Terminate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Terminate!\");
      return 0;
    }
    if (!(res->dyFmiReset=(fmi2ResetFunc)GetProcAddress(res->hInst,\"fmi2Reset\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Reset!\");
      return 0;
    }
    if (!(res->dyFmiSetReal=(fmi2SetRealFunc)GetProcAddress(res->hInst,\"fmi2SetReal\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetReal!\");
      return 0;
    }
    if (!(res->dyFmiGetReal=(fmi2GetRealFunc)GetProcAddress(res->hInst,\"fmi2GetReal\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetReal!\");
      return 0;
    }
    if (!(res->dyFmiSetInteger=(fmi2SetIntegerFunc)GetProcAddress(res->hInst,\"fmi2SetInteger\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetInteger!\");
      return 0;
    }
    if (!(res->dyFmiGetInteger=(fmi2GetIntegerFunc)GetProcAddress(res->hInst,\"fmi2GetInteger\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetInteger!\");
      return 0;
    }
    if (!(res->dyFmiSetBoolean=(fmi2SetBooleanFunc)GetProcAddress(res->hInst,\"fmi2SetBoolean\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetBoolean!\");
      return 0;
    }
    if (!(res->dyFmiGetBoolean=(fmi2GetBooleanFunc)GetProcAddress(res->hInst,\"fmi2GetBoolean\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetBoolean!\");
      return 0;
    }
    if (!(res->dyFmiSetDebugLogging=(fmi2SetDebugLoggingFunc)GetProcAddress(res->hInst,\"fmi2SetDebugLogging\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetDebugLogging!\");
      return 0;
    }
    if (!(res->dyFmiSetString=(fmi2SetStringFunc)GetProcAddress(res->hInst,\"fmi2SetString\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetString!\");
      return 0;
    }
    if (!(res->dyFmiGetString=(fmi2GetStringFunc)GetProcAddress(res->hInst,\"fmi2GetString\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetString!\");
      return 0;
    }
    if(!(res->dyFmiDoStep=(fmi2DoStepFunc)GetProcAddress(res->hInst,\"fmi2DoStep\"))){
      ModelicaError(\"GetProcAddress failed for fmi2DoStep!\\n The model was imported as a Co-Simulation FMU but could not load the CS specific function fmiDoStep\\n Verify that the FMU supports Co-Simulation\");
      return 0;
    }
    if(!(res->dyFmiGetBooleanStatus=(fmi2GetBooleanStatusFunc)GetProcAddress(res->hInst,\"fmi2GetBooleanStatus\"))){
      ModelicaError(\"GetProcAddress failed for fmi2GetBooleanStatus!\\n The model was imported as a Co-Simulation FMU but could not load the CS specific function fmiGetBooleanStatus\\n Verify that the FMU supports Co-Simulation\");
      return 0;
    }
    if (!(res->dyFmiGetDirectionalDerivative=(fmi2GetDirectionalDerivativeFunc)GetProcAddress(res->hInst,\"fmi2GetDirectionalDerivative\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetDirectionalDerivative!\");
      return 0;
    }
    if (!(res->dyFmiGetFMUstate=(fmi2GetFMUstateFunc)GetProcAddress(res->hInst,\"fmi2GetFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiSetFMUstate=(fmi2SetFMUstateFunc)GetProcAddress(res->hInst,\"fmi2SetFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiFreeFMUstate=(fmi2FreeFMUstateFunc)GetProcAddress(res->hInst,\"fmi2FreeFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2FreeFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiSerializedFMUstateSize=(fmi2SerializedFMUstateSizeFunc)GetProcAddress(res->hInst,\"fmi2SerializedFMUstateSize\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SerializedFMUstateSize!\");
      return 0;
    }
    if (!(res->dyFmiSerializeFMUstate=(fmi2SerializeFMUstateFunc)GetProcAddress(res->hInst,\"fmi2SerializeFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SerializeFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiDeSerializeFMUstate=(fmi2DeSerializeFMUstateFunc)GetProcAddress(res->hInst,\"fmi2DeSerializeFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2DeSerializeFMUstate!\");
      return 0;
    }
    res->m=res->dyFmiInstantiate(instanceName, fmi2CoSimulation, \"{cc3e5f4a-2d15-4fb2-a76f-c8b4f9f5b54f}\",resourceLocation, &funcs, fmi2False, loggingOn);
    if (0==res->m) {free(res);res=0;ModelicaError(\"InstantiateModel failed\");}
    else {res->dyTriggered=0;res->dyTime=res->dyLastTime=-1e37;res->discreteInputChanged=1;res->currentMode=dyfmi2InstantiationMode;res->dyLastStepTime=0;res->dyFMUstate=NULL;}
  }
  return res;
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
      end constructor;

      function destructor "Release storage of FMI model"
        extends Modelica.Icons.Function;
        input fmiModel fmi;
        external"C"
                   MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiFreeModelInstance2(fmi);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_Free_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_Free_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiFreeModelInstance2(void*m) {
  struct dy_fmi2Extended*a=m;
  if (a) {
    if(a->dyFMUstate)
    a->dyFmiFreeFMUstate(a->m, &a->dyFMUstate);
    /*a->dyFmiSetDebugLogging(a->m,fmi2True,0,NULL);*/
    a->dyFmiTerminate(a->m);
    a->dyFmiFreeInstance(a->m);
    FreeLibrary(a->hInst);
    free(a);
  }
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
      end destructor;
    end fmiModel;

    function fmiDoStep
    input fmiModel fmi;
    input Real currentTime;
    input Real stepSize;
    input Real preAvailable;
    output Boolean stepOK;
    output Real postAvailable=preAvailable;
    external"C" stepOK= MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiDoStep2(fmi, currentTime, stepSize);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_DoStep_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_DoStep_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
double MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiDoStep2(void*m, double currentTime, double stepSize) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  fmi2Boolean value=fmi2False;
  if (a) {
    status=a->dyFmiDoStep(a->m, currentTime, stepSize, fmi2True);
    if(status==fmi2Discard){
      status = a->dyFmiGetBooleanStatus(a->m, fmi2Terminated, &value);
      if(value==fmi2True){
        terminate(\"Terminate signaled by the FMU\");
      }
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"DoStep failed\");
  return 1.0;
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiDoStep;

    function fmiReset
      input fmiModel fmi;
      output Boolean resetOK;
      external"C" resetOK = MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiReset2(fmi);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_Reset_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_Reset_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
double MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiReset2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiReset(a->m);
    a->currentMode=dyfmi2InstantiationMode;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiReset failed\");
    return 1.0;
  }
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiReset;

    function fmiGetRealScalar
      input fmiModel fmi;
      input Integer ref;
      output Real val;
    algorithm
        val := scalar(fmiGetReal(fmi, {ref}));
    end fmiGetRealScalar;

    function fmiGetReal
      input fmiModel fmi;
      input Integer refs[:];
      output Real vals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiGetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetReal_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiGetReal2(void*m, const int*refs, size_t nrefs, double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetReal failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiGetReal;

    function fmiGetRealwf
      input fmiModel fmi;
      input Integer refs[:];
      input Real preAvailable;
      output Real vals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiGetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetReal_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiGetReal2(void*m, const int*refs, size_t nrefs, double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetReal failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiGetRealwf;

    function fmiSetReal
      input fmiModel fmi;
      input Integer refs[:];
      input Real vals[size(refs, 1)];
      external"C"
                 MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_SetReal_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_SetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSetReal2(void*m, const int*refs, size_t nrefs, const double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetReal failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetReal;

    function fmiSetRealwf
      input fmiModel fmi;
      input Integer refs[:];
      input Real vals[size(refs, 1)];
      input Real preAvailable;
      output Real postAvailable=preAvailable;
      external"C"
                 MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_SetReal_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_SetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSetReal2(void*m, const int*refs, size_t nrefs, const double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetReal failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetRealwf;

    function fmiGetIntegerScalar
      input fmiModel fmi;
      input Integer ref;
      output Integer val;
    algorithm
        val := scalar(fmiGetInteger(fmi, {ref}));
    end fmiGetIntegerScalar;

    function fmiGetInteger
      input fmiModel fmi;
      input Integer refs[:];
      output Integer vals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiGetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetInteger_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetInteger_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiGetInteger2(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiGetInteger;

    function fmiGetIntegerwf
      input fmiModel fmi;
      input Integer refs[:];
      input Integer preAvailable;
      output Integer vals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiGetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetInteger_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetInteger_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiGetInteger2(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiGetIntegerwf;

    function fmiSetInteger
      input fmiModel fmi;
      input Integer refs[:];
      input Integer vals[size(refs, 1)];
    protected
      Integer oldVals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        oldVals);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_SetInteger_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_SetInteger_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSetInteger2(void*m, const int*refs, size_t nrefs, int*vals, int*oldVals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  size_t i = 0;
  if(!nrefs){return;}
  if (a) {
    if(!a->discreteInputChanged){
      status=a->dyFmiGetInteger(a->m, refs, nrefs, oldVals);
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed in SetInteger\");
      for( i = 0; i < nrefs; ++i){
        if(oldVals[i] != vals[i]){
          a->discreteInputChanged = 1;
          break;
        }
      }
    }
    if(a->discreteInputChanged){
      if(a->currentMode == dyfmi2ContinuousTimeMode){
        status = a->dyFmiEnterEventMode(a->m);
        if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
        a->currentMode = dyfmi2EventMode;
      }
      status=a->dyFmiSetInteger(a->m, refs, nrefs, vals);
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetInteger failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetInteger;

    function fmiSetIntegerwf
      input fmiModel fmi;
      input Integer refs[:];
      input Integer vals[size(refs, 1)];
      input Integer preAvailable;
      output Integer postAvailable=preAvailable;
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSetInteger2wf(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_SetIntegerwf_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_SetIntegerwf_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSetInteger2wf(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  size_t i = 0;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetInteger failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetIntegerwf;

    function fmiGetBooleanScalar
      input fmiModel fmi;
      input Integer ref;
      output Boolean val;
    algorithm
        val := scalar(fmiGetBoolean(fmi, {ref}));
    end fmiGetBooleanScalar;

    function fmiGetBoolean
      input fmiModel fmi;
      input Integer refs[:];
      output Boolean vals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiGetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetBoolean_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiGetBoolean2(void*m, const int* refs, size_t nr, int* vals) {
  int i;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(vals));
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed\");
    for(i=nr-1;i>=0;i--) vals[i]=((fmi2Boolean*)(vals))[i];
  }
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiGetBoolean;

    function fmiGetBooleanwf
      input fmiModel fmi;
      input Integer refs[:];
      input Integer preAvailable;
      output Boolean vals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiGetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetBoolean_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiGetBoolean2(void*m, const int* refs, size_t nr, int* vals) {
  int i;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(vals));
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed\");
    for(i=nr-1;i>=0;i--) vals[i]=((fmi2Boolean*)(vals))[i];
  }
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiGetBooleanwf;

    function fmiSetBoolean
      input fmiModel fmi;
      input Integer refs[:];
      input Boolean vals[size(refs, 1)];
    protected
      Boolean dummy[size(refs, 1)];
      Boolean oldVals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        dummy,
        oldVals);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_SetBoolean_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_SetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSetBoolean2(void*m, const int* refs, size_t nr, const int* vals, int* dummy, int* oldVals) {
  size_t i;
  int j;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nr){return;}
  for(i=0;i<nr;++i) ((fmi2Boolean*)(dummy))[i]=vals[i];
  if (a) {
    if(!a->discreteInputChanged){
      status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(oldVals));
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed in SetBoolean\");
      for(j=nr-1;j>=0;j--){
        oldVals[j]=((fmi2Boolean*)(oldVals))[j];
        if(oldVals[j] != dummy[j]){
          a->discreteInputChanged = 1;
          break;
        }
      }
    }
    if(a->discreteInputChanged){
      if(a->currentMode == dyfmi2ContinuousTimeMode){
        status = a->dyFmiEnterEventMode(a->m);
        if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
        a->currentMode = dyfmi2EventMode;
      }
      status=a->dyFmiSetBoolean(a->m, refs, nr, (fmi2Boolean*)(dummy));
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetBoolean failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetBoolean;

    function fmiSetString
      input fmiModel fmi;
      input Integer refs[:];
      input String vals[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSetString2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_SetString_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_SetString_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSetString2(void*m, const int*refs, size_t nrefs,const fmi2String vals[]) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  size_t i = 0;
  if(!nrefs){return;}
  if (a) {
    if(a->currentMode == dyfmi2ContinuousTimeMode){
      status = a->dyFmiEnterEventMode(a->m);
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
      a->currentMode = dyfmi2EventMode;
    }
    status=a->dyFmiSetString(a->m, refs, nrefs, vals);
    a->discreteInputChanged = fmi2True;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetString failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetString;

    function fmiSetBooleanwf
      input fmiModel fmi;
      input Integer refs[:];
      input Boolean vals[size(refs, 1)];
      input Integer preAvailable;
      output Integer postAvailable=preAvailable;
    protected
      Boolean dummy[size(refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSetBoolean2wf(
        fmi,
        refs,
        size(refs, 1),
        vals,
        dummy);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_SetBooleanwf_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_SetBooleanwf_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSetBoolean2wf(void*m, const int* refs, size_t nr, const int* vals, int* dummy) {
  size_t i;
  int j;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nr){return;}
  for(i=0;i<nr;++i) ((fmi2Boolean*)(dummy))[i]=vals[i];
  if (a) {
    status=a->dyFmiSetBoolean(a->m, refs, nr, (fmi2Boolean*)(dummy));
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetBoolean failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetBooleanwf;

    function fmiGetDirectionalDerivative
      input fmiModel fmi;
      input Integer z_refs[:];
      input Integer v_refs[:];
      input Real dv[size(v_refs, 1)];
      output Real dz[size(z_refs, 1)];
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetDirectionalDerivative2(
        fmi,
        z_refs,
        size(z_refs, 1),
        v_refs,
        size(v_refs, 1),
        dv,
        dz);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetDirectionalDerivative2_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetDirectionalDerivative2_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_GetDirectionalDerivative2(void*m, const int* zref, size_t nzr, const int* vrefs, size_t nvr, const double *dv, double *dz) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetDirectionalDerivative(a->m, zref, nzr, vrefs, nvr, dv, dz);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiGetDirectionalDerivative failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiGetDirectionalDerivative;

    function GetRealVariable
      input fmiModel fmi;
      input Real Time;
      input Real realInputs[:];
      input Real realLinearDependentInputs[:];
      input Real states[:];
      input Real linearDependentStates[:];
      input Real linearOffset=0;
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer realLinearDependentInputsValueReferences[:];
      input Integer statesValueRefernces[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputValueReferences[:];
      input Integer outputValueReference[:];
      output Real outputVariable;
    algorithm
      //fmi_Functions.fmiSetTime(fmi, Time);
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetReal(fmi,realLinearDependentInputsValueReferences,realLinearDependentInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      //SetString(fmi,stringInputValueReferences,stringInputs);
      outputVariable:=fmiGetRealScalar(fmi,outputValueReference[1]);
      annotation(derivative(noDerivative=realLinearDependentInputs,noDerivative=linearDependentStates)=derGetRealVariable, LateInline=true);
    end GetRealVariable;

    function derGetRealVariable
      input fmiModel fmi;
      input Real Time;
      input Real realInputs[:];
      input Real realLinearDependentInputs[:];
      input Real states[:];
      input Real linearDependentStates[:];
      input Real linearOffset=0;
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer realLinearDependentInputsValueReferences[:];
      input Integer statesValueRefernces[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputValueReferences[:];
      input Integer outputValueReference[:];
      input Real derRealInputs[:];
      input Real derStates[:];
      input Real derLinearOffsets;
      output Real derOutputVariable;
    protected
      Real dummy[1];
    algorithm
      //fmi_Functions.fmiSetTime(fmi, Time);
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetReal(fmi,realLinearDependentInputsValueReferences,realLinearDependentInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      //setString(fmi,stringInputValueReferences,stringInputs);
      dummy:=fmiGetDirectionalDerivative(fmi, outputValueReference,  cat(1,realInputValueReferences,statesValueRefernces), cat(1,derRealInputs,derStates));
      derOutputVariable:=dummy[1]+derLinearOffsets;
      annotation(LateInline=true);
    end derGetRealVariable;

    function fmiSaveFMUState
      input fmiModel fmi;
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSaveFMUState2(fmi);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSaveFMUState_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSaveFMUState_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSaveFMUState2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status = a->dyFmiGetFMUstate(a->m, &a->dyFMUstate);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiGetFMUstate failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiSaveFMUState;

    function fmiRestoreFMUState
      input fmiModel fmi;
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiRestoreFMUState2(fmi);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiRestoreFMUState_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiRestoreFMUState_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiRestoreFMUState2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status = a->dyFmiSetFMUstate(a->m, a->dyFMUstate);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiSetFMUstate failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiRestoreFMUState;

    function fmiSerializeFMUstate
      input fmiModel fmi;
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSerializeFMUstate2(fmi);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSerializeFMUstate_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSerializeFMUstate_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiSerializeFMUstate2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status = a->dyFmiGetFMUstate(a->m, &a->dyFMUstate);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiGetFMUstate failed\");
    status = a->dyFmiSerializedFMUstateSize(a->m, a->dyFMUstate, &a->dyFMUStateSize);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiSerializedFMUstateSize failed\");
    if( a->dySerializeFMUstate) free(a->dySerializeFMUstate); a->dySerializeFMUstate = NULL;
    a->dySerializeFMUstate = malloc(a->dyFMUStateSize);
    if(!a->dySerializeFMUstate)  ModelicaError(\"malloc call to allocate SerializeFMUstate failed\");
    status = a->dyFmiSerializeFMUstate(a->m, a->dyFMUstate, a->dySerializeFMUstate, a->dyFMUStateSize);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiSerializeFMUstate failed\");
  }
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiSerializeFMUstate;

    function fmiDeSerializeFMUstate
      input fmiModel fmi;
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiDeSerializeFMUstate2(fmi);
        annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiDeSerializeFMUstate_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiDeSerializeFMUstate_C 1
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiDeSerializeFMUstate2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    if(!a->dySerializeFMUstate) ModelicaError(\"serializedFmuState is not allocated!!!\");
    if(a->dyFMUstate){
      a->dyFmiFreeFMUstate(a->m, a->dyFMUstate);
      a->dyFMUstate = NULL;    }
    status = a->dyFmiDeSerializeFMUstate(a->m, a->dySerializeFMUstate, a->dyFMUStateSize, &a->dyFMUstate);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiDeSerializeFMUstate failed\");
    status = a->dyFmiSetFMUstate(a->m, a->dyFMUstate);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiSetFMUstate failed\");
  }
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiDeSerializeFMUstate;

    function fmiEnterSlaveInitializationMode
      input fmiModel fmi;
      input Real relativeTolerance;
      input Real tStart;
      input Boolean forceShutDownAtTStop;
      input Real tStop;
      input Real preAvailable;
      output Real postAvailable = preAvailable;
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiEnterSlaveInitializationMode2(fmi, relativeTolerance, tStart, forceShutDownAtTStop, tStop);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiEnterSlaveInitializationMode_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiEnterSlaveInitializationMode_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiEnterSlaveInitializationMode2(void*m, double relativeTolerance, double tStart, int forceShutDownAtTStop, double tStop) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    if(a->currentMode==dyfmi2InstantiationMode){
      status=a->dyFmiSetupExperiment(a->m, fmi2True, relativeTolerance, tStart, forceShutDownAtTStop, tStop);
      status=a->dyFmiEnterInitializationMode(a->m);
      a->dyTriggered=0;
      a->dyLastTime=a->dyTime;
      a->currentMode=dyfmi2InitializationMode;
    }else{
      status=fmi2OK;
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"InitializeSlave failed\");
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiEnterSlaveInitializationMode;

    function fmiExitSlaveInitializationMode
      input fmiModel fmi;
      input Real preAvailable;
      output Real postAvailable = preAvailable;
      external"C" MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiExitSlaveInitializationMode2(fmi);
      annotation (Header="
#ifndef MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiExitSlaveInitializationMode_C
#define MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiExitSlaveInitializationMode_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void MSLHeatAdaptors_Utilities_ConductionCSdymola3542154276849554_fmiExitSlaveInitializationMode2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiExitInitializationMode(a->m);
    a->dyTriggered=0;
    a->dyLastTime=a->dyTime;
    a->currentMode = dyfmi2EventMode;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiExitModelInitialization failed!\");
  return;
}
#endif", Library="MSLHeatAdaptors_Utilities_ConductionCSdymola", LibraryDirectory="modelica://MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu/Resources/Library/FMU/MSLHeatAdaptors_Utilities_ConductionCSdymola/binaries", __Dymola_CriticalRegion="MSLHeatAdaptors_Utilities_ConductionCSdymola");
    end fmiExitSlaveInitializationMode;
end fmi_Functions;
initial equation
equation
  when initial() then
    fmi = fmi_Functions.fmiModel(fmi_instanceName, fmi_loggingOn, fmi_resourceLocation);
  end when;
initial algorithm
  fmi_Functions.fmiSetReal(fmi, {16777216}, {G});
    fmi_Functions.fmiSetReal(fmi, {352321536}, {_T1_start});
    fmi_Functions.fmiSetReal(fmi, {352321537}, {_T2_start});
    fmi_Functions.fmiEnterSlaveInitializationMode(fmi, fmi_rTol, fmi_StartTime, fmi_forceShutDownAtStopTime, fmi_StopTime, 1);
  fmi_rdum := 1;
  fmi_idum := 1;
  myTimeStart :=time;
algorithm
assert(fmi_CommunicationStepSize > 0.0,"The parameter fmi_CommunicationStepSize has an invalid value, please set a positive value larger than 0.0");
  when {initial(), sample(fmi_StartTime, fmi_CommunicationStepSize)} then
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321536}, {_T1_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321536}, {pre(T1)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321536}, {T1});
      end if;
    end if;
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321537}, {_T2_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321537}, {pre(T2)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321537}, {T2});
      end if;
    end if;
      if fmi_rdum >= 0  and fmi_idum >= 0 and not fmi_exitInit and not initial() then
        fmi_Functions.fmiExitSlaveInitializationMode(fmi, 1);
        fmi_exitInit:=true;
RealFixedLocal :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100663307},
        fmi_rdum);
      end if;
    if time>=fmi_CommunicationStepSize +fmi_StartTime then
      for stepSizeIndex in 1:stepSizeScaleFactor loop
        fmi_StepOK :=fmi_Functions.fmiDoStep(
          fmi,
          time + (stepSizeIndex - 1 - stepSizeScaleFactor)*
            fmi_CommunicationStepSize/stepSizeScaleFactor,
          fmi_CommunicationStepSize/stepSizeScaleFactor,
          1);
      end for;
      fmi_flip :=not pre(fmi_flip);
    end if;
    if not initial() then
      internal.Q_flow1 :=fmi_Functions.fmiGetRealScalar(fmi, 335544320);
      internal.Q_flow2 :=fmi_Functions.fmiGetRealScalar(fmi, 335544321);
    end if;
RealVariables :=fmi_Functions.fmiGetReal(fmi, {436207616,369098761,369098762,
      436207617});
  end when;
  when {pre(fmi_flip), not pre(fmi_flip)} then
    _T1_old := pre(T1);
    _T2_old := pre(T2);
  end when;
equation
  if initial() then
    Q_flow1 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {G, T1, T2}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777216, 352321536, 352321537}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544320});
  else
    Q_flow1 = internal.Q_flow1;
  end if;
  if initial() then
    Q_flow2 = fmi_Functions.GetRealVariable(fmi,myTimeStart, {G, T1, T2}, fill(0.0,0), fill(0.0,0), fill(0.0,0), zeroOffset, fill(false,0), fill(0,0), {16777216, 352321536, 352321537}, fill(0,0), fill(0,0), fill(0,0), fill(0,0), {335544321});
  else
    Q_flow2 = internal.Q_flow2;
  end if;
  temperatureToHeatFlow1.p = RealVariables[1];
  temperatureToHeatFlow1.heatPort.Q_flow = RealVariables[2];
  thermalConductor.dT = RealVariables[3];
  thermalConductor.port_b.T = RealVariables[4];
  thermalConductor.G = RealFixedLocal[1];
//alias Declarations
  temperatureToHeatFlow1.f = Q_flow1;
  thermalConductor.Q_flow = Q_flow1;
  thermalConductor.port_a.Q_flow = Q_flow1;
  temperatureToHeatFlow2.heatPort.Q_flow = Q_flow1;
  thermalConductor.port_b.Q_flow = temperatureToHeatFlow1.heatPort.Q_flow;
  temperatureToHeatFlow2.f = temperatureToHeatFlow1.heatPort.Q_flow;
  temperatureToHeatFlow1.heatPort.T = temperatureToHeatFlow1.p;
  thermalConductor.port_a.T = temperatureToHeatFlow1.p;
  temperatureToHeatFlow2.p = thermalConductor.port_b.T;
  temperatureToHeatFlow2.heatPort.T = thermalConductor.port_b.T;
  annotation (__Dymola_FMUImportVersion="Dymola 2021", __Dymola_FMUImportPath="C:/Users/FRICKL/Desktop/TESsystem/MSLHeatAdaptors_Utilities_ConductionCSdymola.fmu", __Dymola_FMUImportIncludeAllVariables="true", __Dymola_FMUImportIntegrate="false", experiment(StartTime=0.0, StopTime=1.0, Tolerance=1E-08),
    Icon(graphics={
      Text(extent={{-150,150},{150,110}},
        lineColor={0,0,255},
        textString="%name"),
      Text(extent={{-150,-110},{150,-150}},
        lineColor={95,95,95},
        textString="FMI 2.0 CS")}),
Documentation(info="<html>
<h4>ModelDescription Attributes</h4>
<ul>
<li>fmiVersion = 2.0</li>
<li>modelName = MSLHeatAdaptors_Utilities_ConductionCSdymola</li>
<li>generationTool = Dymola Version 2021 (64-bit), 2020-05-13 (using Dassl with tolerance 1e-08)</li>
<li>generationDateAndTime = 2020-10-27T14:48:21Z</li>
</ul>
<p><br><b>Co-Simulation Attributes</b></p>
<ul>
<li>needsExecutionTool = false</li>
<li>canHandleVariableCommunicationStepSize = true</li>
<li>canInterpolateInputs = true</li>
<li>maxOutputDerivativeOrder = 1</li>
<li>canRunAsynchronuously = false</li>
<li>canBeInstantiatedOnlyOncePerProcess = true</li>
<li>canNotUseMemoryManagementFunctions = true</li>
<li>canGetAndSetFMUstate = true</li>
<li>canSerializeFMUstate = true</li>
<li>providesDirectionalDerivative = true</li>
</ul>
</html>"));
end MSLHeatAdaptors_Utilities_ConductionCSdymola_fmu;
